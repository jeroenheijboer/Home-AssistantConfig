# Pulse sensor water
  - platform: serial
    serial_port: /dev/ttyACM0
# Slimme meter DSMR
#  - platform: dsmr
#    port: /dev/ttyUSB0
# Weather prediction
  - platform: yr
# PV Output
  - platform: pvoutput
    system_id: !secret pvoutput_system_id
    api_key: !secret pvoutput_api_key
    scan_interval: 150
  - platform: template
    sensors:
#Zonnepanelen
      power_consumption:
        value_template: '{% if is_state_attr("sensor.pvoutput", "power_consumption", "NaN") %}0{% else %}{{ states.sensor.pvoutput.attributes.power_consumption }}{% endif %}'
        friendly_name: 'Using'
        unit_of_measurement: 'Watt'
      energy_consumption:
        value_template: '{{ "%0.1f"|format(states.sensor.pvoutput.attributes.energy_consumption|float/1000) }}'
        friendly_name: 'Used'
        unit_of_measurement: 'kWh'
      power_generation:
        value_template: '{% if is_state_attr("sensor.pvoutput", "power_generation", "NaN") %}0{% else %}{{ states.sensor.pvoutput.attributes.power_generation }}{% endif %}'
        friendly_name: 'Generating'
        unit_of_measurement: 'Watt'
      energy_generation:
        value_template: '{% if is_state_attr("sensor.pvoutput", "energy_generation", "NaN") %}0{% else %}{{ "%0.2f"|format(states.sensor.pvoutput.attributes.energy_generation|float/1000) }}{% endif %}'
        friendly_name: 'Generated'
        unit_of_measurement: 'kWh'
# Netto Energie verbruik
      energie_netto_verbruik:
        friendly_name: Netto energie verbruik
        value_template: >
          {% if states.sensor.electricity_currently_delivered.state and states.sensor.power_generation.state != "unknown" %}
          {{ (states.sensor.electricity_currently_delivered.state | float) - states.sensor.power_generation.state | float }}
          {% else %}
          "unknown"
          {% endif %}
        unit_of_measurement: 'Watt'
# Gas verbruik
  - platform: command_line
    name: gas_afname_dagelijks
    command: "python3 /home/pi/.homeassistant/python_scripts/dsmr_gas_today.py"
    unit_of_measurement: "m3"
    value_template: '{{ value | round(2) }}'
    scan_interval: 3600
# Power Tarief hernoemen
#      stroom_tarief:
#        friendly_name: "Huidig tarief"
#        value_template: >-
#          {% if is_state('sensor.power_tariff', 'low') %}
#            Laag
#          {% else %}
#            Normaal
#          {% endif %}
# Water sensoren
#      m1_pulse_count:
#        value_template: '{{% set strtext = states("sensor.serial_sensor") %}{% set m1_pulse_count = ( strtext.split(':')[5]) %}}'
#      m1_value: 
#        value_template: '{% set strtext = states("sensor.serial_sensor") %}{% set m1_value = ( strtext.split(':')[6] ) %}'
#      m1_liters: 
#        value_template: '{% set strtext = states("sensor.serial_sensor") %}{% set m1_liters = ( m1_value )| float/10 %}'
#      m2_pulse_count: 
#        value_template: '{% set strtext = states("sensor.serial_sensor") %}{% set m2_pulse_count =( strtext.split(':')[8] ) %}'
#      m2_value: 
#        value_template: '{% set strtext = states("sensor.serial_sensor") %}{% set m2_value = ( strtext.split(':')[9] ) %}'
#      m3_pulse_count:
#        value_template: '{% set strtext = states("sensor.serial_sensor") %}{% set m3_pulse_count = ( strtext.split(':')[11] ) %}'
#      m3_value: 
#        value_template: '{% set strtext = states("sensor.serial_sensor") %}{% set m3_value = ( strtext.split(':')[12] ) %}'
#      m4_pulse_count:
#        value_template: '{% set strtext = states("sensor.serial_sensor") %}{% set m4_pulse_count = ( strtext.split(':')[14] ) %}'
#      m4_value:
#        value_template: '{% set strtext = states("sensor.serial_sensor") %}{% set m4_value = ( strtext.split(':')[15] ) %}'
#      m5_pulse_count:
#        value_template: '{% set strtext = states("sensor.serial_sensor") %}{% set m5_pulse_count = ( strtext.split(':')[17] ) %}'
#      m5_value:
#        value_template: '{% set strtext = states("sensor.serial_sensor") %}{% set m5_value = ( strtext.split(':')[18] ) %}'

# Roomba Thinking Cleaner
  - platform: thinkingcleaner
#Monitor Pi System
  - platform: systemmonitor
    scan_interval:
     minutes: 30
    resources:
      - type: disk_free
        arg: /
      - type: memory_free
      - type: processor_use
      - type: last_boot
  - platform: command_line
    name: ha_internal_dbsize
    scan_interval:
     minutes: 360
    command: "du -m /home/pi/.homeassistant/home-assistant_v2.db | cut -f1"
    unit_of_measurement: 'MB'
    value_template: '{{ value | int - 1 }}'
  - platform: command_line
    name: ha_recorder_dbsize
    scan_interval:
     minutes: 360
    command: /home/pi/.homeassistant/scripts/check_mysql_dbsize.sh
    unit_of_measurement: "MB"
  - platform: command_line
    name: dsmr_dbsize
    scan_interval:
     minutes: 360
    command: /home/pi/.homeassistant/scripts/check_dsmr_dbsize.sh
    unit_of_measurement: "MB"
    value_template: "{{  value | replace ('MB','') | round(0) }}"
  - platform: cert_expiry
    scan_interval:
     minutes: 360
    host: homeassistant.vd-meer.com
    port: 8123
# Buienradar
  - platform: buienradar
    latitude: !secret buienradar_latitude
    longitude: !secret buienradar_longitude
    monitored_conditions:
      - stationname
      - symbol
      - humidity
      - temperature
      - groundtemperature
      - windspeed
      - windforce
      - winddirection
      - windazimuth
      - pressure
      - visibility
      - windgust
      - precipitation
      - irradiance
      # Forecast
      - precipitation_forecast_average
      - precipitation_forecast_total
      - symbol_1d
      - temperature_1d
      - rainchance_1d
      - rain_1d
  - platform: google_travel_time
    api_key: !secret google_travel_time_api_key
    origin: zone.home
    destination: zone.work
    name: Travel Time Home to Work
    options:
     arrival_time: '08:15:00'
  - platform: google_travel_time
    api_key: !secret google_travel_time_api_key
    origin: device_tracker.iphone_van_martin
    destination: zone.home
    name: Travel Time Martin to Home

#### MQTT SENSORS DSMR ####
  - platform: mqtt
    state_topic: "dsmr/reading/id"
    name: "electricity_id"
  - platform: mqtt
    state_topic: "dsmr/reading/timestamp"
    name: "electricity_timestamp"
    value_template: "{{ as_timestamp(value) | timestamp_custom('%d-%b-%Y %H:%M') }}"
  - platform: mqtt
    state_topic: "dsmr/reading/electricity_currently_delivered"
    name: "electricity_currently_delivered"
    unit_of_measurement: "Watt"
    value_template: "{{  value | float *1000 | round(0) }}"
  - platform: mqtt
    state_topic: "dsmr/reading/electricity_currently_returned"
    name: "electricity_currently_returned"
    unit_of_measurement: "Watt"
    value_template: "{{  value | float *1000 | round(0) }}"
  - platform: mqtt
    state_topic: "dsmr/reading/electricity_delivered_1"
    name: "electricity_delivered_1"
    unit_of_measurement: "kWh"
    value_template: "{{  value | round(2) }}"
  - platform: mqtt
    state_topic: "dsmr/reading/electricity_delivered_2"
    name: "electricity_delivered_2"
    unit_of_measurement: "kWh"
    value_template: "{{  value | round(2) }}"
  - platform: mqtt
    state_topic: "dsmr/reading/electricity_returned_1"
    name: "electricity_returned_1"
    unit_of_measurement: "kWh"
    value_template: "{{  value | round(2) }}"
  - platform: mqtt
    state_topic: "dsmr/reading/electricity_returned_2"
    name: "electricity_returned_2"
    unit_of_measurement: "kWh"
    value_template: "{{  value | round(2) }}"
  - platform: mqtt
    state_topic: "dsmr/reading/extra_device_timestamp"
    name: "extra_device_timestamp"
    value_template: "{{ as_timestamp(value) | timestamp_custom('%d-%b-%Y %H:%M') }}"
  - platform: mqtt
    state_topic: "dsmr/reading/extra_device_delivered"
    name: "extra_device_delivered"
    unit_of_measurement: "m3"
    value_template: "{{  value | round(2) }}"
